// Algorithm: Subset Sum
// Type: Dynamic Programming / Backtracking
// Time Complexity: O(n * sum)      // n = number of elements, sum = target sum
// Space Complexity: O(n * sum)

function subsetSum(arr, n, sum):
    create a 2D boolean table dp[n+1][sum+1]

    for i from 0 to n:
        dp[i][0] = true    // sum 0 is always possible

    for i from 1 to n:
        for j from 1 to sum:
            if arr[i-1] > j:
                dp[i][j] = dp[i-1][j]
            else:
                dp[i][j] = dp[i-1][j] OR dp[i-1][j - arr[i-1]]

    return dp[n][sum]
