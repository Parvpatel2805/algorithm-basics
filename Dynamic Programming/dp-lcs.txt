// Algorithm: Longest Common Subsequence (LCS)
// Type: Dynamic Programming
// Time Complexity: O(m × n)
// Space Complexity: O(m × n)

function LCS(X, Y):
    m = length(X)
    n = length(Y)
    dp = 2D array of size (m+1) x (n+1)

    for i = 0 to m:
        for j = 0 to n:
            if i == 0 or j == 0:
                dp[i][j] = 0
            else if X[i-1] == Y[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])

    return dp[m][n]
