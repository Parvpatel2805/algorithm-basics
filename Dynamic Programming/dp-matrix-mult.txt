// Algorithm: Matrix Chain Multiplication
// Type: Dynamic Programming
// Time Complexity: O(n^3)
// Space Complexity: O(n^2)

function matrixChainOrder(p):
    n = length(p) - 1
    dp = 2D array of size n x n filled with 0

    for l = 2 to n:  // l is the chain length
        for i = 0 to n - l:
            j = i + l - 1
            dp[i][j] = âˆž
            for k = i to j - 1:
                cost = dp[i][k] + dp[k+1][j] + p[i] * p[k+1] * p[j+1]
                if cost < dp[i][j]:
                    dp[i][j] = cost

    return dp[0][n-1]

